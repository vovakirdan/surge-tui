package screens

import (
	"fmt"
	"path/filepath"
	"strings"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

// ProjectScreen —ç–∫—Ä–∞–Ω –æ–±–∑–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
type ProjectScreen struct {
	BaseScreen

	// –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
	projectPath   string
	fileTree      *FileTree
	selectedFile  string
	buildStatus   BuildStatus
	lastBuildTime string

	// UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
	focusedPanel PanelType
}

// PanelType —Ç–∏–ø –ø–∞–Ω–µ–ª–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
type PanelType int

const (
	FileTreePanel PanelType = iota
	StatusPanel
)

// BuildStatus —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–±–æ—Ä–∫–∏
type BuildStatus struct {
	InProgress   bool
	Success      bool
	ErrorCount   int
	WarningCount int
	Duration     string
}

// FileTree –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
type FileTree struct {
	Root      *FileNode
	Selected  int
	Expanded  map[string]bool
	Files     []string // –ü–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
}

// FileNode —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤
type FileNode struct {
	Name     string
	Path     string
	IsDir    bool
	Children []*FileNode
	Parent   *FileNode
	Level    int
}

// NewProjectScreen —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞
func NewProjectScreen(projectPath string) *ProjectScreen {
	screen := &ProjectScreen{
		BaseScreen:   NewBaseScreen("Project Explorer"),
		projectPath:  projectPath,
		focusedPanel: FileTreePanel,
		fileTree: &FileTree{
			Expanded: make(map[string]bool),
		},
	}

	screen.loadFileTree()
	return screen
}

// Init –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω (Bubble Tea)
func (ps *ProjectScreen) Init() tea.Cmd {
	return nil
}

// Update –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (Bubble Tea)
func (ps *ProjectScreen) Update(msg tea.Msg) (Screen, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.KeyMsg:
		return ps.handleKeyPress(msg)
	case tea.WindowSizeMsg:
		ps.SetSize(msg.Width, msg.Height-1) // -1 –¥–ª—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞
		return ps, nil
	case FileTreeUpdateMsg:
		ps.updateFileTree(msg)
		return ps, nil
	case BuildStatusMsg:
		ps.updateBuildStatus(msg)
		return ps, nil
	}

	return ps, nil
}

// View –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω (Bubble Tea)
func (ps *ProjectScreen) View() string {
	if ps.Width() == 0 {
		return "Loading project..."
	}

	// –†–∞–∑–¥–µ–ª—è–µ–º —ç–∫—Ä–∞–Ω –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
	leftWidth := ps.Width() / 2
	rightWidth := ps.Width() - leftWidth

	// –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
	leftPanel := ps.renderFileTree(leftWidth, ps.Height())

	// –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
	rightPanel := ps.renderProjectStatus(rightWidth, ps.Height())

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–∞–Ω–µ–ª–∏
	return lipgloss.JoinHorizontal(lipgloss.Top, leftPanel, rightPanel)
}

// OnEnter –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω
func (ps *ProjectScreen) OnEnter() tea.Cmd {
	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
	return ps.refreshFileTree()
}

// handleKeyPress –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
func (ps *ProjectScreen) handleKeyPress(msg tea.KeyMsg) (Screen, tea.Cmd) {
	switch msg.String() {
	case "left", "right":
		ps.switchPanel()
		return ps, nil
	case "up", "k":
		return ps, ps.navigateUp()
	case "down", "j":
		return ps, ps.navigateDown()
	case "enter":
		return ps, ps.selectItem()
	case "space":
		return ps, ps.toggleExpand()
	case "ctrl+r":
		return ps, ps.refreshFileTree()
	case "ctrl+b":
		return ps, ps.startBuild()
	}

	return ps, nil
}

// switchPanel –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ñ–æ–∫—É—Å –º–µ–∂–¥—É –ø–∞–Ω–µ–ª—è–º–∏
func (ps *ProjectScreen) switchPanel() {
	if ps.focusedPanel == FileTreePanel {
		ps.focusedPanel = StatusPanel
	} else {
		ps.focusedPanel = FileTreePanel
	}
}

// navigateUp –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –∫—É—Ä—Å–æ—Ä –≤–≤–µ—Ä—Ö –≤ –¥–µ—Ä–µ–≤–µ —Ñ–∞–π–ª–æ–≤
func (ps *ProjectScreen) navigateUp() tea.Cmd {
	if ps.focusedPanel == FileTreePanel && ps.fileTree.Selected > 0 {
		ps.fileTree.Selected--
	}
	return nil
}

// navigateDown –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –∫—É—Ä—Å–æ—Ä –≤–Ω–∏–∑ –≤ –¥–µ—Ä–µ–≤–µ —Ñ–∞–π–ª–æ–≤
func (ps *ProjectScreen) navigateDown() tea.Cmd {
	if ps.focusedPanel == FileTreePanel && ps.fileTree.Selected < len(ps.fileTree.Files)-1 {
		ps.fileTree.Selected++
	}
	return nil
}

// selectItem –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
func (ps *ProjectScreen) selectItem() tea.Cmd {
	if ps.focusedPanel == FileTreePanel && len(ps.fileTree.Files) > 0 {
		selectedPath := ps.fileTree.Files[ps.fileTree.Selected]
		ps.selectedFile = selectedPath

		// –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
		if !ps.isDirectory(selectedPath) {
			return func() tea.Msg {
				return OpenFileMsg{FilePath: selectedPath}
			}
		}
	}
	return nil
}

// toggleExpand —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç/—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
func (ps *ProjectScreen) toggleExpand() tea.Cmd {
	if ps.focusedPanel == FileTreePanel && len(ps.fileTree.Files) > 0 {
		selectedPath := ps.fileTree.Files[ps.fileTree.Selected]
		if ps.isDirectory(selectedPath) {
			ps.fileTree.Expanded[selectedPath] = !ps.fileTree.Expanded[selectedPath]
			ps.rebuildFileList()
		}
	}
	return nil
}

// refreshFileTree –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
func (ps *ProjectScreen) refreshFileTree() tea.Cmd {
	return func() tea.Msg {
		// TODO: —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –≤ —Ñ–æ–Ω–µ
		return FileTreeUpdateMsg{}
	}
}

// startBuild –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç–∞
func (ps *ProjectScreen) startBuild() tea.Cmd {
	return func() tea.Msg {
		// TODO: –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä–∫—É –≤ —Ñ–æ–Ω–µ
		return BuildStartMsg{ProjectPath: ps.projectPath}
	}
}

// renderFileTree –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
func (ps *ProjectScreen) renderFileTree(width, height int) string {
	title := "üìÅ Files"
	if ps.focusedPanel == FileTreePanel {
		title = "üìÅ Files (focused)"
	}

	style := lipgloss.NewStyle().
		Border(lipgloss.RoundedBorder()).
		Width(width-2).
		Height(height-2).
		Padding(1)

	if ps.focusedPanel == FileTreePanel {
		style = style.BorderForeground(lipgloss.Color("#7C3AED"))
	}

	content := ps.buildFileTreeContent(width-4, height-4)

	return style.Render(fmt.Sprintf("%s\n\n%s", title, content))
}

// renderProjectStatus –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
func (ps *ProjectScreen) renderProjectStatus(width, height int) string {
	title := "üìä Project Status"
	if ps.focusedPanel == StatusPanel {
		title = "üìä Project Status (focused)"
	}

	style := lipgloss.NewStyle().
		Border(lipgloss.RoundedBorder()).
		Width(width-2).
		Height(height-2).
		Padding(1)

	if ps.focusedPanel == StatusPanel {
		style = style.BorderForeground(lipgloss.Color("#7C3AED"))
	}

	content := ps.buildStatusContent()

	return style.Render(fmt.Sprintf("%s\n\n%s", title, content))
}

// buildFileTreeContent —Å—Ç—Ä–æ–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤
func (ps *ProjectScreen) buildFileTreeContent(width, height int) string {
	if len(ps.fileTree.Files) == 0 {
		return "No files found"
	}

	var lines []string
	for i, filePath := range ps.fileTree.Files {
		prefix := "  "
		if i == ps.fileTree.Selected && ps.focusedPanel == FileTreePanel {
			prefix = "‚ñ∂ "
		}

		fileName := filepath.Base(filePath)
		if ps.isDirectory(filePath) {
			fileName = "üìÅ " + fileName
		} else {
			fileName = "üìÑ " + fileName
		}

		line := prefix + fileName
		if len(line) > width {
			line = line[:width-3] + "..."
		}

		lines = append(lines, line)

		if len(lines) >= height {
			break
		}
	}

	return strings.Join(lines, "\n")
}

// buildStatusContent —Å—Ç—Ä–æ–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞
func (ps *ProjectScreen) buildStatusContent() string {
	var lines []string

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
	lines = append(lines, fmt.Sprintf("Path: %s", ps.projectPath))
	lines = append(lines, "")

	// –°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∫–∏
	lines = append(lines, "Last Build:")
	if ps.buildStatus.InProgress {
		lines = append(lines, "  üîÑ Building...")
	} else if ps.buildStatus.Success {
		lines = append(lines, "  ‚úÖ Success")
	} else {
		lines = append(lines, "  ‚ùå Failed")
	}

	if ps.buildStatus.ErrorCount > 0 {
		lines = append(lines, fmt.Sprintf("  üî¥ %d errors", ps.buildStatus.ErrorCount))
	}

	if ps.buildStatus.WarningCount > 0 {
		lines = append(lines, fmt.Sprintf("  üü° %d warnings", ps.buildStatus.WarningCount))
	}

	if ps.buildStatus.Duration != "" {
		lines = append(lines, fmt.Sprintf("  ‚è±Ô∏è  %s", ps.buildStatus.Duration))
	}

	lines = append(lines, "")

	// –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
	lines = append(lines, "Quick Actions:")
	lines = append(lines, "  Enter - Open file")
	lines = append(lines, "  Space - Expand/collapse")
	lines = append(lines, "  Ctrl+B - Build")
	lines = append(lines, "  Ctrl+R - Refresh")

	return strings.Join(lines, "\n")
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

func (ps *ProjectScreen) loadFileTree() {
	// TODO: –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
}

func (ps *ProjectScreen) updateFileTree(msg FileTreeUpdateMsg) {
	// TODO: –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
}

func (ps *ProjectScreen) updateBuildStatus(msg BuildStatusMsg) {
	ps.buildStatus = BuildStatus{
		InProgress:   msg.InProgress,
		Success:      msg.Success,
		ErrorCount:   msg.ErrorCount,
		WarningCount: msg.WarningCount,
		Duration:     msg.Duration,
	}
}

func (ps *ProjectScreen) rebuildFileList() {
	// TODO: –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–µ—Ä–µ–≤–∞
}

func (ps *ProjectScreen) isDirectory(path string) bool {
	// TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
	return false
}

// ShortHelp –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É
func (ps *ProjectScreen) ShortHelp() string {
	return "‚Üë‚Üì: Navigate ‚Ä¢ Enter: Open ‚Ä¢ Space: Expand ‚Ä¢ Ctrl+B: Build"
}

// FullHelp –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–ø—Ä–∞–≤–∫—É
func (ps *ProjectScreen) FullHelp() []string {
	help := ps.BaseScreen.FullHelp()
	help = append(help, []string{
		"",
		"Project Screen:",
		"  ‚Üë/‚Üì or j/k - Navigate files",
		"  ‚Üê/‚Üí - Switch panels",
		"  Enter - Open selected file",
		"  Space - Expand/collapse directory",
		"  Ctrl+B - Build project",
		"  Ctrl+R - Refresh file tree",
	}...)
	return help
}

// –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞

// FileTreeUpdateMsg –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤
type FileTreeUpdateMsg struct{}

// BuildStatusMsg —Å—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∫–∏
type BuildStatusMsg struct {
	InProgress   bool
	Success      bool
	ErrorCount   int
	WarningCount int
	Duration     string
}

// BuildStartMsg –∑–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏
type BuildStartMsg struct {
	ProjectPath string
}

// OpenFileMsg –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞
type OpenFileMsg struct {
	FilePath string
}