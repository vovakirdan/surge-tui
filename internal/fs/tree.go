package fs

import (
	"os"
	"path/filepath"
	"sort"
	"strings"
)

// FileNode —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤
type FileNode struct {
	Name     string      `json:"name"`
	Path     string      `json:"path"`
	IsDir    bool        `json:"is_dir"`
	Size     int64       `json:"size"`
	Children []*FileNode `json:"children,omitempty"`
	Parent   *FileNode   `json:"-"`
	Level    int         `json:"level"`
	Expanded bool        `json:"expanded"`
}

// FileTree –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
type FileTree struct {
	Root        *FileNode
	FlatList    []*FileNode // –ü–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	Selected    int
	ShowHidden  bool
	FilterSurge bool // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ .sg —Ñ–∞–π–ª—ã
}

// NewFileTree —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
func NewFileTree(rootPath string) (*FileTree, error) {
	tree := &FileTree{
		Selected:    0,
		ShowHidden:  false,
		FilterSurge: false,
	}

	root, err := tree.buildNode(rootPath, nil, 0)
	if err != nil {
		return nil, err
	}

	tree.Root = root
	tree.Root.Expanded = true
	tree.rebuildFlatList()

	return tree, nil
}

// buildNode —Å—Ç—Ä–æ–∏—Ç —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
func (ft *FileTree) buildNode(path string, parent *FileNode, level int) (*FileNode, error) {
	info, err := os.Stat(path)
	if err != nil {
		return nil, err
	}

	node := &FileNode{
		Name:     filepath.Base(path),
		Path:     path,
		IsDir:    info.IsDir(),
		Size:     info.Size(),
		Parent:   parent,
		Level:    level,
		Expanded: false,
	}

	// –î–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
	if node.IsDir {
		entries, err := os.ReadDir(path)
		if err != nil {
			return node, nil // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∑–µ–ª –±–µ–∑ –¥–µ—Ç–µ–π –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
		}

		for _, entry := range entries {
			// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω –ø–æ–∫–∞–∑
			if !ft.ShowHidden && strings.HasPrefix(entry.Name(), ".") {
				continue
			}

			// –§–∏–ª—å—Ç—Ä –ø–æ .sg —Ñ–∞–π–ª–∞–º
			if ft.FilterSurge && !entry.IsDir() {
				if !strings.HasSuffix(entry.Name(), ".sg") {
					continue
				}
			}

			childPath := filepath.Join(path, entry.Name())
			child, err := ft.buildNode(childPath, node, level+1)
			if err != nil {
				continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
			}

			node.Children = append(node.Children, child)
		}

		// –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã, –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
		sort.Slice(node.Children, func(i, j int) bool {
			a, b := node.Children[i], node.Children[j]
			if a.IsDir != b.IsDir {
				return a.IsDir // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
			}
			return strings.ToLower(a.Name) < strings.ToLower(b.Name)
		})
	}

	return node, nil
}

// rebuildFlatList –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
func (ft *FileTree) rebuildFlatList() {
	ft.FlatList = []*FileNode{}
	if ft.Root != nil {
		ft.addToFlatList(ft.Root)
	}
}

// addToFlatList –¥–æ–±–∞–≤–ª—è–µ—Ç —É–∑–µ–ª –∏ –µ–≥–æ –≤–∏–¥–∏–º—ã—Ö –¥–µ—Ç–µ–π –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
func (ft *FileTree) addToFlatList(node *FileNode) {
	ft.FlatList = append(ft.FlatList, node)

	if node.IsDir && node.Expanded {
		for _, child := range node.Children {
			ft.addToFlatList(child)
		}
	}
}

// ToggleExpanded –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
func (ft *FileTree) ToggleExpanded(index int) {
	if index < 0 || index >= len(ft.FlatList) {
		return
	}

	node := ft.FlatList[index]
	if node.IsDir {
		node.Expanded = !node.Expanded
		ft.rebuildFlatList()

		// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è
		if ft.Selected >= len(ft.FlatList) {
			ft.Selected = len(ft.FlatList) - 1
		}
	}
}

// SetSelected —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
func (ft *FileTree) SetSelected(index int) {
	if len(ft.FlatList) == 0 {
		ft.Selected = 0
		return
	}

	if index < 0 {
		ft.Selected = 0
	} else if index >= len(ft.FlatList) {
		ft.Selected = len(ft.FlatList) - 1
	} else {
		ft.Selected = index
	}
}

// GetSelected –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É–∑–µ–ª
func (ft *FileTree) GetSelected() *FileNode {
	if ft.Selected < 0 || ft.Selected >= len(ft.FlatList) {
		return nil
	}
	return ft.FlatList[ft.Selected]
}

// SetShowHidden —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–∫–∞–∑ —Å–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
func (ft *FileTree) SetShowHidden(show bool) {
	if ft.ShowHidden != show {
		ft.ShowHidden = show
		ft.Refresh()
	}
}

// SetFilterSurge —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä –ø–æ .sg —Ñ–∞–π–ª–∞–º
func (ft *FileTree) SetFilterSurge(filter bool) {
	if ft.FilterSurge != filter {
		ft.FilterSurge = filter
		ft.Refresh()
	}
}

// Refresh –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–µ—Ä–µ–≤–æ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
func (ft *FileTree) Refresh() {
	if ft.Root == nil {
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
	expandedPaths := ft.getExpandedPaths(ft.Root)

	// –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –¥–µ—Ä–µ–≤–æ
	newRoot, err := ft.buildNode(ft.Root.Path, nil, 0)
	if err != nil {
		return
	}

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
	ft.restoreExpandedPaths(newRoot, expandedPaths)

	ft.Root = newRoot
	ft.rebuildFlatList()

	// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
	if ft.Selected >= len(ft.FlatList) {
		ft.Selected = len(ft.FlatList) - 1
	}
}

// getExpandedPaths —Å–æ–±–∏—Ä–∞–µ—Ç –ø—É—Ç–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
func (ft *FileTree) getExpandedPaths(node *FileNode) map[string]bool {
	expanded := make(map[string]bool)
	ft.collectExpandedPaths(node, expanded)
	return expanded
}

// collectExpandedPaths —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –ø—É—Ç–∏
func (ft *FileTree) collectExpandedPaths(node *FileNode, expanded map[string]bool) {
	if node.IsDir && node.Expanded {
		expanded[node.Path] = true
		for _, child := range node.Children {
			ft.collectExpandedPaths(child, expanded)
		}
	}
}

// restoreExpandedPaths –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
func (ft *FileTree) restoreExpandedPaths(node *FileNode, expanded map[string]bool) {
	if node.IsDir && expanded[node.Path] {
		node.Expanded = true
		for _, child := range node.Children {
			ft.restoreExpandedPaths(child, expanded)
		}
	}
}

// GetDisplayName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è
func (node *FileNode) GetDisplayName() string {
	indent := strings.Repeat("  ", node.Level)

	if node.IsDir {
		if node.Expanded {
			return indent + "üìÇ " + node.Name
		} else {
			return indent + "üìÅ " + node.Name
		}
	}

	// –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
	ext := strings.ToLower(filepath.Ext(node.Name))
	switch ext {
	case ".sg":
		return indent + "üìú " + node.Name
	case ".md":
		return indent + "üìù " + node.Name
	case ".json", ".yaml", ".yml":
		return indent + "‚öôÔ∏è " + node.Name
	default:
		return indent + "üìÑ " + node.Name
	}
}
